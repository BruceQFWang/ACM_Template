对于最大独立集,每个点也只有两种状态,即属于点 i 属于独立集或者不属于独立集两种情况:
1):dp[i][0]表示点 i 不属于独立集的情况下,最大独立集中点的个数.
2):dp[i][1]表示点 i 属于独立集的情况下.最大独立集中点的个数.
对于第一种状态dp[i][0],由于点 i 不属于独立集,所以子节点可以属于独立解,也可以不属于独立集,所取得子节点状态应该为数值较大的那个状态,DP转移方程:
dp[i][0] = ∑(v 取 i 的子节点)max(dp[v][0], dp[v][1])
对于第二种状态dp[i][1],由于 i 点属于独立集,所以它的子节点都不能属于独立集,所以对于点 i 的第一种状态,只和它的子节点的第二种状态有关.等于其所有子节点的第二种状态的值加 1,DP转移方程如下:
dp[i][1] = 1 + ∑(v 取 i 的子节点) dp[v][0]
代码:
int a[N]; //点权
vector<int>E[N];
int dp[N][2];

void dfs(int u, int pre){
    dp[u][0] = 0;
    dp[u][1] = a[u];
    for(int i=0; i<E[u].size(); i++){
        int v = E[u][i];
        if(v == pre)continue;
        dfs(v, u);
        dp[u][0] += max(dp[v][0], dp[v][1]);
        dp[u][1] += dp[v][0];
    }
}
